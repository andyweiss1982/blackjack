{"version":3,"sources":["components/Game.module.css","context/DeckContext.js","functions/points.js","components/Game.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","DeckContext","createContext","shuffledDeck","cards","values","suits","forEach","deck","value","suit","push","image","code","sort","Math","random","DeckContextProvider","children","useState","setDeck","useEffect","length","Provider","deal","number","dealOut","splice","points","total","filter","card","aces","_ace","Game","useContext","dealerCards","setDealerCards","playerCards","setPlayerCards","gameState","setGameState","dealerHand","className","styles","main","button","onClick","playerHand","hand","hidden","join","map","key","cardBack","src","alt","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.97254b9f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Game_main__1w0Fr\",\"button\":\"Game_button__2pwN_\",\"hand\":\"Game_hand__1PoBu\",\"hidden\":\"Game_hidden__1EqZr\",\"cardBack\":\"Game_cardBack__2-goh\",\"card\":\"Game_card__3tVSl\"};","import React, { createContext, useState, useEffect } from 'react'\n\nexport const DeckContext = createContext()\n\nconst shuffledDeck = () => {\n  const cards = []\n  const decks = [1,2,3,4,5,6]\n  const values = [\"A\",2,3,4,5,6,7,8,9,10,\"J\",\"Q\",\"K\"]\n  const suits = [\"H\",\"S\",\"C\",\"D\"]\n  decks.forEach(deck => {\n    values.forEach(value => {\n      suits.forEach(suit => {\n        cards.push({\n          suit,\n          value,\n          image: `https://deckofcardsapi.com/static/img/${(value === 10 ? 0 : value) + suit}.png`,\n          code: value + suit + deck\n        })\n      })\n    })\n  })\n  return cards.sort(() => 0.5 - Math.random())\n}\n\nexport const DeckContextProvider = ({ children }) => {\n  const [deck, setDeck] = useState(shuffledDeck())\n\n  useEffect(\n    () => { if (deck.length < 70) setDeck(shuffledDeck()) },\n    [deck.length]\n  )\n\n  const deal = number => {\n    const dealOut = deck.splice(0, number)\n    setDeck([...deck])\n    return dealOut\n  }\n\n  return(\n    <DeckContext.Provider value={{ deal }}>\n      { children }\n    </DeckContext.Provider>\n  )\n}\n\n\n\n","export const points = cards => {\n  let total = 0\n  cards.filter(card => card.value !== 'A')\n    .forEach(card => {\n      if (typeof(card.value) === 'string'){\n        total += 10\n      } else {\n        total += card.value\n      }\n    })\n  const aces = cards.filter(card => card.value === 'A')\n  if (aces.length >= 21 - total){\n    return total + aces.length\n  } else {\n    aces.forEach(_ace => {\n      if (total + 11 > 21) total += 1\n      else total += 11\n    })\n  }\n  return total\n}\n","import React, { useContext, useEffect, useState } from \"react\"\nimport { DeckContext } from '../context/DeckContext'\nimport { points } from '../functions/points'\nimport styles from './Game.module.css'\n\nconst Game = () => {\n  const { deal } = useContext(DeckContext)\n  const [dealerCards, setDealerCards] = useState([])\n  const [playerCards, setPlayerCards] = useState([])\n  const [gameState, setGameState] = useState('initial')\n\n  useEffect(\n    () => {\n      if (gameState === 'playerDone'){\n        let dealerHand = [...dealerCards]\n        while (points(dealerHand) < 16){\n          dealerHand = [...dealerHand, ...deal(1)]\n        }\n        setDealerCards(dealerHand)\n        setGameState('done')\n      }\n    },\n    [gameState, dealerCards, deal]\n  )\n\n  return(\n    <main className={styles.main}>\n      {\n        gameState === 'done' ?\n        <h1>\n          {\n            (points(playerCards) > 21 || points(dealerCards) === 21 || (points(dealerCards) < 21 && points(dealerCards) > points(playerCards))) ?\n            \"You Lose!\" :\n            (points(playerCards) === points(dealerCards)) ?\n            \"Push!\" :\n            \"You Win!\"\n          }\n        </h1> :\n        <h1>Blackjack</h1>\n      }\n      {\n        (gameState === 'initial' || gameState === 'done') &&\n        <button\n          className={styles.button}\n          onClick={() => {\n            setPlayerCards(deal(2))\n            setDealerCards(deal(2))\n            setGameState('playerDecision')\n          }}\n        >\n          Deal\n        </button>\n      }\n      {\n        (gameState === 'playerDecision') &&\n        <>\n          <button\n            className={styles.button}\n            onClick={() => {\n              const playerHand = [...playerCards, ...deal(1)]\n              if (points(playerHand) > 21) setGameState('done')\n              setPlayerCards(playerHand)\n            }}\n          >\n            Hit\n          </button>\n          <button\n            className={styles.button}\n            onClick={() => {\n              setGameState('playerDone')\n            }}\n          >\n            Stay\n          </button>\n        </>\n      }\n      {\n        (gameState !== 'initial') &&\n        <>\n          <h2>\n            Dealer:{' '}\n            {\n              (gameState !== 'initial' && gameState !== 'playerDecision') ?\n              points(dealerCards) :\n              '???'\n            }\n          </h2>\n          <ul className={\n            (gameState !== 'done') ?\n            [styles.hand, styles.hidden].join(' ') :\n            styles.hand\n          }>\n            {\n              dealerCards.map(card => (\n                <li key={card.code} className={styles.cardBack}>\n                  <img\n                    src={card.image}\n                    alt={card.code}\n                    className={styles.card}\n                  />\n                </li>\n              ))\n            }\n          </ul>\n          <h2>Player: {points(playerCards)}</h2>\n          <ul className={styles.hand}>\n            {\n              playerCards.map(card => (\n                <li key={card.code} className={styles.cardBack}>\n                  <img\n                    src={card.image}\n                    alt={card.code}\n                    className={styles.card}\n                  />\n                </li>\n              ))\n            }\n          </ul>\n        </>\n      }\n    </main>\n  )\n}\n\nexport default Game\n","import React from 'react'\nimport { DeckContextProvider } from './context/DeckContext'\nimport Game from './components/Game'\n\nconst App = () => {\n  return(\n    <DeckContextProvider>\n      <Game/>\n    </DeckContextProvider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}